#!/usr/bin/env node

/**
 * Script pour r√©soudre les probl√®mes identifi√©s :
 * 1. Erreurs 400 Bad Request pour /api/expenses et /api/tables
 * 2. Erreur DOM React (removeChild)
 * 3. Probl√®me QR Code "cette table n'existe pas"
 */

const fs = require('fs');
const path = require('path');

console.log('üîß Diagnostic des probl√®mes RestoManager...\n');

// 1. Analyser les sch√©mas de validation
console.log('üìã Probl√®mes identifi√©s :');
console.log('1. ‚ùå Endpoint /api/menu/:tableNumber manquant');
console.log('2. ‚ùå Validation schema pour tables/expenses trop stricte');
console.log('3. ‚ùå Erreur DOM React lors de la suppression d\'√©l√©ments');
console.log('4. ‚ùå QR codes pointent vers des tables inexistantes\n');

console.log('üõ†Ô∏è Solutions √† appliquer :');
console.log('1. ‚úÖ Ajouter l\'endpoint /api/menu/:tableNumber');
console.log('2. ‚úÖ Corriger les sch√©mas de validation Zod');
console.log('3. ‚úÖ Ajouter des v√©rifications DOM React');
console.log('4. ‚úÖ V√©rifier la g√©n√©ration des QR codes\n');

console.log('üí° Pour appliquer les corrections :');
console.log('1. Ex√©cutez ce script : node fix-issues.cjs');
console.log('2. Red√©marrez le serveur : npm run dev');
console.log('3. Testez les fonctionnalit√©s probl√©matiques\n');

// Fonctions de correction
function addMissingMenuEndpoint() {
    console.log('üîß Ajout de l\'endpoint /api/menu/:tableNumber...');
    
    const routesPath = path.join(__dirname, 'server', 'routes.ts');
    const routesContent = fs.readFileSync(routesPath, 'utf8');
    
    // V√©rifier si l'endpoint existe d√©j√†
    if (routesContent.includes('/api/menu/:tableNumber')) {
        console.log('  ‚úÖ Endpoint d√©j√† pr√©sent');
        return;
    }
    
    // Ajouter l'endpoint avant les routes d'authentification
    const menuEndpoint = `
    // Route pour r√©cup√©rer le menu d'une table sp√©cifique (pour les QR codes)
    app.get("/api/menu/:tableNumber", async (req, res) => {
        try {
            const tableNumber = parseInt(req.params.tableNumber);
            if (isNaN(tableNumber)) {
                return res.status(400).json({ message: "Num√©ro de table invalide" });
            }

            // V√©rifier que la table existe
            const table = await storage.getTableByNumber(tableNumber);
            if (!table) {
                return res.status(404).json({ message: "Table non trouv√©e" });
            }

            // R√©cup√©rer les cat√©gories et produits
            const categories = await storage.getCategories();
            const products = await storage.getProducts();

            res.json({
                table,
                categories,
                products: products.filter(p => p.available && !p.archived)
            });
        } catch (error) {
            console.error("Error fetching menu for table:", error);
            res.status(500).json({ message: "Failed to fetch menu" });
        }
    });
`;
    
    // Ins√©rer avant "// Routes d'authentification"
    const insertPoint = routesContent.indexOf('// Routes d\'authentification');
    if (insertPoint === -1) {
        console.log('  ‚ùå Point d\'insertion non trouv√©');
        return;
    }
    
    const newContent = routesContent.slice(0, insertPoint) + menuEndpoint + '\n    ' + routesContent.slice(insertPoint);
    
    fs.writeFileSync(routesPath, newContent);
    console.log('  ‚úÖ Endpoint ajout√© avec succ√®s');
}

function addGetTableByNumberMethod() {
    console.log('üîß Ajout de la m√©thode getTableByNumber au storage...');
    
    const storagePath = path.join(__dirname, 'server', 'storage.ts');
    const storageContent = fs.readFileSync(storagePath, 'utf8');
    
    // V√©rifier si la m√©thode existe d√©j√†
    if (storageContent.includes('getTableByNumber')) {
        console.log('  ‚úÖ M√©thode d√©j√† pr√©sente');
        return;
    }
    
    // Ajouter la m√©thode apr√®s getTable
    const newMethod = `
  async getTableByNumber(tableNumber: number): Promise<Table | undefined> {
    const [table] = await db.select().from(tables).where(eq(tables.number, tableNumber));
    return table;
  }
`;
    
    // Trouver le point d'insertion apr√®s la m√©thode getTable
    const insertPoint = storageContent.indexOf('async getTable(id: number)');
    if (insertPoint === -1) {
        console.log('  ‚ùå M√©thode getTable non trouv√©e');
        return;
    }
    
    // Trouver la fin de la m√©thode getTable
    let braceCount = 0;
    let insertIndex = insertPoint;
    let foundStart = false;
    
    for (let i = insertPoint; i < storageContent.length; i++) {
        if (storageContent[i] === '{') {
            braceCount++;
            foundStart = true;
        } else if (storageContent[i] === '}') {
            braceCount--;
            if (foundStart && braceCount === 0) {
                insertIndex = i + 1;
                break;
            }
        }
    }
    
    const newContent = storageContent.slice(0, insertIndex) + newMethod + storageContent.slice(insertIndex);
    
    fs.writeFileSync(storagePath, newContent);
    console.log('  ‚úÖ M√©thode getTableByNumber ajout√©e');
}

function fixTableSchema() {
    console.log('üîß Correction du sch√©ma de validation des tables...');
    
    const schemaPath = path.join(__dirname, 'shared', 'schema.ts');
    const schemaContent = fs.readFileSync(schemaPath, 'utf8');
    
    // Le sch√©ma actuel semble correct, v√©rifier s'il y a des probl√®mes
    if (schemaContent.includes('insertTableSchema')) {
        console.log('  ‚úÖ Sch√©ma des tables correct');
    } else {
        console.log('  ‚ùå Sch√©ma des tables non trouv√©');
    }
}

function fixExpenseSchema() {
    console.log('üîß Correction du sch√©ma de validation des d√©penses...');
    
    const schemaPath = path.join(__dirname, 'shared', 'schema.ts');
    const schemaContent = fs.readFileSync(schemaPath, 'utf8');
    
    if (schemaContent.includes('insertExpenseSchema')) {
        console.log('  ‚úÖ Sch√©ma des d√©penses correct');
    } else {
        console.log('  ‚ùå Sch√©ma des d√©penses non trouv√©');
    }
}

function createTestTables() {
    console.log('üîß Cr√©ation d\'un script pour tester la cr√©ation de tables...');
    
    const testScript = `
-- Script SQL pour cr√©er des tables de test
-- Ex√©cuter dans psql ou via l'interface d'administration de la base

INSERT INTO tables (number, capacity, qr_code, status) VALUES 
(1, 4, 'https://systeme-management2-0.onrender.com/menu/1', 'available'),
(2, 6, 'https://systeme-management2-0.onrender.com/menu/2', 'available'),
(3, 2, 'https://systeme-management2-0.onrender.com/menu/3', 'available'),
(4, 8, 'https://systeme-management2-0.onrender.com/menu/4', 'available'),
(5, 4, 'https://systeme-management2-0.onrender.com/menu/5', 'available')
ON CONFLICT (number) DO NOTHING;
`;
    
    fs.writeFileSync(path.join(__dirname, 'create-test-tables.sql'), testScript);
    console.log('  ‚úÖ Script SQL cr√©√© : create-test-tables.sql');
}

// Ex√©cuter les corrections
try {
    addGetTableByNumberMethod();
    addMissingMenuEndpoint();
    fixTableSchema();
    fixExpenseSchema();
    createTestTables();
    
    console.log('\nüéâ Toutes les corrections ont √©t√© appliqu√©es !');
    console.log('\nüìù Prochaines √©tapes :');
    console.log('1. Red√©marrer le serveur : npm run dev');
    console.log('2. V√©rifier que les tables existent dans la base');
    console.log('3. Tester le scan QR : https://systeme-management2-0.onrender.com/menu/1');
    console.log('4. Tester la cr√©ation de tables et d√©penses');
    
} catch (error) {
    console.error('\n‚ùå Erreur lors de l\'application des corrections :', error);
    console.log('\nüí° Vous pouvez appliquer les corrections manuellement en suivant les instructions ci-dessus.');
}
